<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>notes on Bowser&#39;s blog</title>
    <link>https://bowser1704.github.io/note/</link>
    <description>Recent content in notes on Bowser&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Thu, 12 Nov 2020 19:19:16 +0800</lastBuildDate>
    
	<atom:link href="https://bowser1704.github.io/note/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go Modules</title>
      <link>https://bowser1704.github.io/note/gomod/</link>
      <pubDate>Thu, 12 Nov 2020 19:19:16 +0800</pubDate>
      
      <guid>https://bowser1704.github.io/note/gomod/</guid>
      <description>Go Modules 参考 Go blogpost using-go-modules. 两个 version Pseudo-versions VS semantic versions 前者为依赖 repo 没有打 tag, 则按照一定的规则给一个 version。 后者为一种 version 规则。 // 可以指定 version go get. go get rsc.io/quote@v3.0.0 下载和校验 Module downloading</description>
    </item>
    
    <item>
      <title>初谈 SDN</title>
      <link>https://bowser1704.github.io/note/overlay-network/</link>
      <pubDate>Tue, 11 Aug 2020 23:37:44 +0800</pubDate>
      
      <guid>https://bowser1704.github.io/note/overlay-network/</guid>
      <description>谈一谈容器网络和云上网络。 Bridge VXLAN Docker default network Flannel 1. Bridge Bridge 也就是网桥「也可以说是二层交换机/switch」，是一个二层设备，对受到的包，Forwardin</description>
    </item>
    
    <item>
      <title>CI 实践</title>
      <link>https://bowser1704.github.io/note/ci/</link>
      <pubDate>Mon, 03 Aug 2020 16:55:07 +0800</pubDate>
      
      <guid>https://bowser1704.github.io/note/ci/</guid>
      <description>CI Drone CI 我们使用 Drone 和 GitHub Actions 一起作为 CI/CD 工具， GitHub Actions 机器性能好，操作较为简单。 Drone 可定制程度高，拿到手之后想怎么做都可以。并且因为国内的网络环境，CD(</description>
    </item>
    
    <item>
      <title>iptables 的一些学习总结。</title>
      <link>https://bowser1704.github.io/note/iptables/</link>
      <pubDate>Mon, 29 Jun 2020 10:18:22 +0800</pubDate>
      
      <guid>https://bowser1704.github.io/note/iptables/</guid>
      <description>iptables 的一些学习笔记。 netfilter 有 几个hook，分别有不同的功能。 PREROUTING: Triggered by the NF_IP_PRE_ROUTING hook. INPUT: Triggered by the NF_IP_LOCAL_IN hook. FORWARD: Triggered by the NF_IP_FORWARD hook. OUTPUT: Triggered by the NF_IP_LOCAL_OUT hook. POSTROUTING: Triggered by the NF_IP_POST_ROUTING hook. Tables↓/Chain</description>
    </item>
    
    <item>
      <title>豆子峡谷黑苹果 5GHz WI-FI 无法使用 80 MHz</title>
      <link>https://bowser1704.github.io/note/nuc8i5-wifi/</link>
      <pubDate>Sat, 27 Jun 2020 15:37:05 +0800</pubDate>
      
      <guid>https://bowser1704.github.io/note/nuc8i5-wifi/</guid>
      <description>nuc8i5bench hackintosh WIFI 跑不满速度 路由器：斐讯 K2 网卡：BCM94360CS K2 理论上 5GHz 速度应该可以达到 867 Mbps 但是这里只有 180 Mbps。网卡和路由器都是支持 802.11ac 的。 经过</description>
    </item>
    
    <item>
      <title>使用 coc.nvim</title>
      <link>https://bowser1704.github.io/note/coc-in-vim/</link>
      <pubDate>Fri, 26 Jun 2020 11:12:15 +0800</pubDate>
      
      <guid>https://bowser1704.github.io/note/coc-in-vim/</guid>
      <description>“在 vim 中像 vscode 一样 使用 LSP &amp;quot;</description>
    </item>
    
    <item>
      <title>在 k3s 内使用 cert-manager 管理证书</title>
      <link>https://bowser1704.github.io/note/using-cert-manager-k3s/</link>
      <pubDate>Thu, 25 Jun 2020 19:30:20 +0800</pubDate>
      
      <guid>https://bowser1704.github.io/note/using-cert-manager-k3s/</guid>
      <description>“云原生使用 acme.sh 有一些无法很好解决的问题，所以使用 cert-manager 管理证书&amp;rdquo;</description>
    </item>
    
    <item>
      <title>Helm in k3s</title>
      <link>https://bowser1704.github.io/note/helm-in-k3s/</link>
      <pubDate>Thu, 25 Jun 2020 10:11:19 +0800</pubDate>
      
      <guid>https://bowser1704.github.io/note/helm-in-k3s/</guid>
      <description>“国内环境在 k3s 内使用 Helm&amp;rdquo;</description>
    </item>
    
    <item>
      <title>return与exit的不同</title>
      <link>https://bowser1704.github.io/note/exec/</link>
      <pubDate>Sun, 17 Nov 2019 11:23:47 +0800</pubDate>
      
      <guid>https://bowser1704.github.io/note/exec/</guid>
      <description>首先问题就是有时候我们返回用return，有时候是exit是什么区别呢？ 首先明确函数执行 我们直接运行某些脚本，或者是``sh x.sh`，这背</description>
    </item>
    
    <item>
      <title>csapp Chapter12 并发编程</title>
      <link>https://bowser1704.github.io/note/csappchapter12/</link>
      <pubDate>Thu, 14 Nov 2019 23:43:14 +0800</pubDate>
      
      <guid>https://bowser1704.github.io/note/csappchapter12/</guid>
      <description>基于进程的并发编程 就像我们最初写的echo服务一样，listen来了一个请求，创建一个connfd，一个子进程去处理，写入coonfd。如下</description>
    </item>
    
  </channel>
</rss>