<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on Bowser</title>
    <link>https://bowser1704.github.io/</link>
    <description>Recent content in Home on Bowser</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>This work is licensed under a CC BY-NC 4.0(署名-非商业性使用 4.0 国际) License.</copyright>
    <lastBuildDate>Thu, 05 Dec 2019 01:04:48 +0800</lastBuildDate>
    
	<atom:link href="https://bowser1704.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>读卡夫卡《变形计》</title>
      <link>https://bowser1704.github.io/blog/20191205-%E8%AF%BB%E5%8D%A1%E5%A4%AB%E5%8D%A1%E5%8F%98%E5%BD%A2%E8%AE%A1/</link>
      <pubDate>Thu, 05 Dec 2019 01:04:48 +0800</pubDate>
      
      <guid>https://bowser1704.github.io/blog/20191205-%E8%AF%BB%E5%8D%A1%E5%A4%AB%E5%8D%A1%E5%8F%98%E5%BD%A2%E8%AE%A1/</guid>
      <description>小说的开头，“一天早晨, 格里高尔·萨姆沙从不安的睡梦中醒来, 却发现自己躺在床上变成了一只巨大的甲虫。”，看上去难以置信，是荒谬的，但是当我们</description>
    </item>
    
    <item>
      <title>return与exit的不同</title>
      <link>https://bowser1704.github.io/note/exec/</link>
      <pubDate>Sun, 17 Nov 2019 11:23:47 +0800</pubDate>
      
      <guid>https://bowser1704.github.io/note/exec/</guid>
      <description>首先问题就是有时候我们返回用return，有时候是exit是什么区别呢？ 首先明确函数执行 我们直接运行某些脚本，或者是``sh x.sh`，这背</description>
    </item>
    
    <item>
      <title>csapp Chapter12 并发编程</title>
      <link>https://bowser1704.github.io/note/csappchapter12/</link>
      <pubDate>Thu, 14 Nov 2019 23:43:14 +0800</pubDate>
      
      <guid>https://bowser1704.github.io/note/csappchapter12/</guid>
      <description>基于进程的并发编程 就像我们最初写的echo服务一样，listen来了一个请求，创建一个connfd，一个子进程去处理，写入coonfd。如下</description>
    </item>
    
    <item>
      <title>csapp Chapter11 网络编程</title>
      <link>https://bowser1704.github.io/note/csappchapter11/</link>
      <pubDate>Wed, 13 Nov 2019 21:30:14 +0800</pubDate>
      
      <guid>https://bowser1704.github.io/note/csappchapter11/</guid>
      <description>主要记录一下socket相关内容，网络协议不多做描述。 下图是基本的步骤图 getaddrinfo 一句话：获取套接字地址，从url，也就是dns获取真正的ip地址，</description>
    </item>
    
    <item>
      <title>csapp Chapter10 UnixIO</title>
      <link>https://bowser1704.github.io/note/csappchapter10/</link>
      <pubDate>Tue, 12 Nov 2019 22:05:45 +0800</pubDate>
      
      <guid>https://bowser1704.github.io/note/csappchapter10/</guid>
      <description>基本概念 首先要有一个思维，Linux上面基本上所有外部设备都是文件，都是通过IO来读取，写入的，包括键盘，网络，终端&amp;hellip;.. P.</description>
    </item>
    
    <item>
      <title>《天气之子》反映的人生观</title>
      <link>https://bowser1704.github.io/blog/20191102-%E5%A4%A9%E6%B0%94%E4%B9%8B%E5%AD%90%E5%8F%8D%E6%98%A0%E7%9A%84%E4%BA%BA%E7%94%9F%E8%A7%82/</link>
      <pubDate>Sat, 02 Nov 2019 20:30:51 +0800</pubDate>
      
      <guid>https://bowser1704.github.io/blog/20191102-%E5%A4%A9%E6%B0%94%E4%B9%8B%E5%AD%90%E5%8F%8D%E6%98%A0%E7%9A%84%E4%BA%BA%E7%94%9F%E8%A7%82/</guid>
      <description>电影中不断出现的《麦田里的守望者》 开头就是一个麦田里的守望者的特写镜头，就像霍尔顿一样，帆高也是离家出走，十分敏感，胆小，软弱，但是就是不愿</description>
    </item>
    
    <item>
      <title>利用systemd管理nginx.service</title>
      <link>https://bowser1704.github.io/note/systemctlservice/</link>
      <pubDate>Fri, 01 Nov 2019 14:50:23 +0800</pubDate>
      
      <guid>https://bowser1704.github.io/note/systemctlservice/</guid>
      <description>systemd是什么 以前的Linux系统启动，首先会启动一个init.d，然后其他所有的进程都是这个进程的子进程，但是现在的改进，启用sys</description>
    </item>
    
    <item>
      <title>短链接的实现</title>
      <link>https://bowser1704.github.io/blog/20191031-%E7%9F%AD%E9%93%BE%E6%8E%A5%E7%9A%84%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Thu, 31 Oct 2019 23:57:33 +0800</pubDate>
      
      <guid>https://bowser1704.github.io/blog/20191031-%E7%9F%AD%E9%93%BE%E6%8E%A5%E7%9A%84%E5%AE%9E%E7%8E%B0/</guid>
      <description>什么是短链接 就是你经常在手机短信，或者微博上看到的URL，都是很短的并且像t.cn这种开头的，限制字数，短信发送按字数收费，微博限制回复长度</description>
    </item>
    
    <item>
      <title>谈谈系统启动发生了什么</title>
      <link>https://bowser1704.github.io/blog/20190822-%E8%B0%88%E8%B0%88%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/</link>
      <pubDate>Thu, 22 Aug 2019 16:23:18 +0800</pubDate>
      
      <guid>https://bowser1704.github.io/blog/20190822-%E8%B0%88%E8%B0%88%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/</guid>
      <description>&lt;p&gt;系统启动实际上东西比较多，这里只是讲一讲，系统引导方面的东西。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://bowser1704.github.io/draft/anyway/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bowser1704.github.io/draft/anyway/</guid>
      <description>当事情变得奇怪起来的时候，你也会变的奇怪 说实话有一些陌生，但是那又能怎么办呢？ 我没有办法，只能没有选择的，妥协，但是我要坚持，我要去做，做所</description>
    </item>
    
    <item>
      <title></title>
      <link>https://bowser1704.github.io/draft/malloc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bowser1704.github.io/draft/malloc/</guid>
      <description>几种在堆上分配内存的方式 void *malloc(size_t size); void free(void *ptr); void *calloc(size_t nmemb, size_t size); void *realloc(void *ptr, size_t size); void *reallocarray(void *ptr, size_t nmemb, size_t size); 1. malloc void *malloc(int n);//n为要分配的字节数 该函数必须配合memset初始化 int</description>
    </item>
    
    <item>
      <title>关于</title>
      <link>https://bowser1704.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bowser1704.github.io/about/</guid>
      <description>关于我自己 一个还在读本科的垃圾cser。 我喜欢看电影，看书，但是没有影评，也没有书评，对的我就是这么垃圾，混混pt站。 喜欢读诗，读的难听，写</description>
    </item>
    
  </channel>
</rss>